import rtconfig
Import('RTT_ROOT')
from building import *

# get current directory
cwd = GetCurrentDir()

# The set of source files associated with this SConscript file.
src = []
src += Glob('STM32F7xx_HAL_Driver/Src/stm32f7xx_ll_rcc.c')
src += Glob('STM32F7xx_HAL_Driver/Src/stm32f7xx_ll_bus.c')
src += Glob('STM32F7xx_HAL_Driver/Src/stm32f7xx_ll_system.c')
src += Glob('STM32F7xx_HAL_Driver/Src/stm32f7xx_ll_exti.c')
src += Glob('STM32F7xx_HAL_Driver/Src/stm32f7xx_ll_cortex.c')
src += Glob('STM32F7xx_HAL_Driver/Src/stm32f7xx_ll_utils.c')
src += Glob('STM32F7xx_HAL_Driver/Src/stm32f7xx_ll_pwr.c')
src += Glob('STM32F7xx_HAL_Driver/Src/stm32f7xx_ll_dma.c')
src += Glob('STM32F7xx_HAL_Driver/Src/stm32f7xx_ll_usart.c')
src += Glob('STM32F7xx_HAL_Driver/Src/stm32f7xx_ll_gpio.c')
# src += Glob('STM32F7xx_HAL_Driver/Src/*.c')

#add for startup script 
if rtconfig.CROSS_TOOL == 'gcc':
     src = src + ['CMSIS/Device/ST/STM32F7xx/Source/Templates/gcc/startup_stm32f765xx.s']
elif rtconfig.CROSS_TOOL == 'keil':
     src = src + ['CMSIS/Device/ST/STM32F7xx/Source/Templates/arm/startup_stm32f765xx.s']
elif rtconfig.CROSS_TOOL == 'iar':
    src = src + ['CMSIS/Device/ST/STM32F7xx/Source/Templates/iar/startup_stm32f765xx.s']

#add for DSP library
src += Glob('CMSIS/DSP/Source/FastMathFunctions/*f32.c')
src += Glob('CMSIS/DSP/Source/BasicMathFunctions/*f32.c')
# src += Glob('CMSIS/DSP/Source/MatrixFunctions/*f32.c')
# src += Glob('CMSIS/DSP/Source/SupportFunctions/*f32.c')

path = [cwd + '/STM32F7xx_HAL_Driver/Inc', 
    cwd + '/CMSIS/Device/ST/STM32F7xx/Include',
    cwd + '/CMSIS/DSP/Include',
	cwd + '/CMSIS/Include']

# defines = ['USE_HAL_DRIVER', 'STM32F765xx', '__VFP_FP__', 'ARM_MATH_MATRIX_CHECK', 'ARM_MATH_CM7', 'ARM_MATH_ROUNDING', '__FPU_PRESENT="1"']
defines = Split('''
    HSE_VALUE="16000000"
    HSE_STARTUP_TIMEOUT="100"
    LSE_STARTUP_TIMEOUT="5000"
    LSE_VALUE="32768"
    EXTERNAL_CLOCK_VALUE="12288000"
    HSI_VALUE="16000000"
    LSI_VALUE="32000"
    VDD_VALUE="3300"
    PREFETCH_ENABLE="0"
    ART_ACCLERATOR_ENABLE="0"
''')

group = DefineGroup('STM32_StdPeriph', src, depend = [''], CPPPATH = path, CPPDEFINES = defines)

Return('group')
